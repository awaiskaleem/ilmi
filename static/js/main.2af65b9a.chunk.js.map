{"version":3,"sources":["assets/images sync nonrecursive //.(png|jpe?g)$","assets/images/Screenshot 2024-08-17 at 11.31.31.png","assets/images/Screenshot 2024-08-17 at 11.31.39.png","assets/images/Screenshot 2024-08-17 at 11.31.47.png","assets/images/Screenshot 2024-08-17 at 11.31.54.png","assets/images/Screenshot 2024-08-18 at 11.54.24.png","assets/images/Screenshot 2024-08-18 at 11.54.46.png","assets/images/Screenshot 2024-08-18 at 11.54.58.png","assets/images/Screenshot 2024-08-18 at 11.55.11.png","assets/images/Screenshot 2024-08-18 at 11.55.28.png","assets/images/Screenshot 2024-08-18 at 11.55.40.png","assets/images/Screenshot 2024-08-18 at 11.55.55.png","assets/images/Screenshot 2024-08-18 at 11.56.06.png","assets/result/result_fail.mp3","assets/result/result_success.mp4","assets/result/success.gif","assets/result/try_again.gif","app/imageImporter.js","app/memoryUtils.js","app/styles.js","app/MemoryTrainer.js","App.js","reportWebVitals.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","images","requireContext","require","key","imageStyle","width","height","objectFit","margin","cursor","border","selectedStyle","correctStyle","incorrectStyle","MemoryTrainer","playerName","setPlayerName","useState","currentStep","setCurrentStep","selectedImages","setSelectedImages","extraImages","setExtraImages","userSelection","setUserSelection","isSuccessful","setIsSuccessful","imageCount","setImageCount","progress","setProgress","isMemorizationPhase","setIsMemorizationPhase","questionCount","setQuestionCount","successfulAttemptsScore","setSuccessfulAttemptsScore","successCount","setSuccessCount","gameStarted","setGameStarted","pointsList","setPointsList","intervalRef","useRef","successAudioRef","failAudioRef","startTrainingHandler","useCallback","randomImages","startTraining","length","randomIndex","Math","floor","random","includes","push","generateExtraImagesHandler","generateExtraImages","extraCount","combinedImages","sort","handleNextStep","isMatch","every","image","pointsForThisQuestion","prevCount","prevScore","scaledPoints","round","prevList","newCount","setTimeout","useEffect","decrement","current","setInterval","prevProgress","newProgress","clearInterval","currentTime","play","catch","error","console","getProgressStyle","backgroundColor","position","top","left","transition","borderRadius","buttonStyle","fontSize","padding","marginTop","color","boxShadow","maxWidth","React","createElement","style","display","flexDirection","alignItems","justifyContent","minHeight","fontFamily","boxSizing","fontWeight","ref","src","right","listStylePosition","paddingLeft","type","placeholder","value","onChange","target","marginBottom","onClick","startGameWithName","trim","Fragment","index","alt","overflow","newSelection","handleImageClick","filter","img","handleImageClickHandler","handleCheckClick","textAlign","points","getPointsDisplay","handleRestart","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.2af65b9a.chunk.js","sourcesContent":["var map = {\n\t\"./Screenshot 2024-08-17 at 11.31.31.png\": 14,\n\t\"./Screenshot 2024-08-17 at 11.31.39.png\": 15,\n\t\"./Screenshot 2024-08-17 at 11.31.47.png\": 16,\n\t\"./Screenshot 2024-08-17 at 11.31.54.png\": 17,\n\t\"./Screenshot 2024-08-18 at 11.54.24.png\": 18,\n\t\"./Screenshot 2024-08-18 at 11.54.46.png\": 19,\n\t\"./Screenshot 2024-08-18 at 11.54.58.png\": 20,\n\t\"./Screenshot 2024-08-18 at 11.55.11.png\": 21,\n\t\"./Screenshot 2024-08-18 at 11.55.28.png\": 22,\n\t\"./Screenshot 2024-08-18 at 11.55.40.png\": 23,\n\t\"./Screenshot 2024-08-18 at 11.55.55.png\": 24,\n\t\"./Screenshot 2024-08-18 at 11.56.06.png\": 25\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 13;","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2024-08-17 at 11.31.31.9c982553.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2024-08-17 at 11.31.39.96fa0165.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2024-08-17 at 11.31.47.0c83b3a5.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2024-08-17 at 11.31.54.60d60dfd.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2024-08-18 at 11.54.24.8c2f9c65.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2024-08-18 at 11.54.46.22b96af0.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2024-08-18 at 11.54.58.0997ef8b.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2024-08-18 at 11.55.11.16e40b79.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2024-08-18 at 11.55.28.85f79131.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2024-08-18 at 11.55.40.49935dcf.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2024-08-18 at 11.55.55.76ee5624.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2024-08-18 at 11.56.06.eb9757e4.png\";","module.exports = __webpack_public_path__ + \"static/media/result_fail.1506875c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/result_success.cf61fc8e.mp4\";","module.exports = __webpack_public_path__ + \"static/media/success.691275a9.gif\";","module.exports = __webpack_public_path__ + \"static/media/try_again.75c28eca.gif\";","// imageImporter.js\n\n// Dynamically require all images from the 'src/assets/images' directory\nexport const importAll = (requireContext) => {\n  return requireContext.keys().map(key => {\n    return requireContext(key);\n  });\n};\n\nexport const images = importAll(require.context('../assets/images', false, /\\.(png|jpe?g)$/));\n","// memoryUtils.js\n\nexport const startTraining = (images, imageCount) => {\n    const randomImages = [];\n    while (randomImages.length < imageCount) {\n      const randomIndex = Math.floor(Math.random() * images.length);\n      if (!randomImages.includes(images[randomIndex])) {\n        randomImages.push(images[randomIndex]);\n      }\n    }\n    return randomImages;\n  };\n\n  export const generateExtraImages = (selectedImages, images, imageCount) => {\n    const extraCount = Math.floor(imageCount / 2);\n    const combinedImages = [...selectedImages];\n    while (combinedImages.length < imageCount + extraCount) {\n      const randomIndex = Math.floor(Math.random() * images.length);\n      if (!combinedImages.includes(images[randomIndex])) {\n        combinedImages.push(images[randomIndex]);\n      }\n    }\n    combinedImages.sort(() => 0.5 - Math.random());\n    return combinedImages;\n  };\n\n  export const handleImageClick = (image, userSelection) => {\n    if (userSelection.includes(image)) {\n      return userSelection.filter(img => img !== image);\n    } else {\n      return [...userSelection, image];\n    }\n  };\n","// styles.js\n\nexport const imageStyle = {\n    width: \"200px\",\n    height: \"200px\",\n    objectFit: \"cover\",\n    margin: \"10px\",\n    cursor: \"pointer\",\n    border: \"3px solid transparent\",\n  };\n  \n  export const selectedStyle = {\n    ...imageStyle,\n    border: \"3px solid blue\",\n  };\n  \n  export const correctStyle = {\n    ...imageStyle,\n    border: \"6px solid lime\",\n  };\n  \n  export const incorrectStyle = {\n    ...imageStyle,\n    border: \"6px solid red\",\n  };\n  ","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { images } from \"./imageImporter\";\nimport {\n  startTraining,\n  generateExtraImages,\n  handleImageClick,\n} from \"./memoryUtils\";\nimport {\n  imageStyle,\n  selectedStyle,\n  correctStyle,\n  incorrectStyle,\n} from \"./styles\";\n\nconst TOTAL_QUESTIONS = 10;\nconst MAX_SCORE = 40; // Maximum possible score\n\nconst MemoryTrainer = () => {\n  const [playerName, setPlayerName] = useState(''); // State to store player's name\n  const [currentStep, setCurrentStep] = useState(0);\n  const [selectedImages, setSelectedImages] = useState([]);\n  const [extraImages, setExtraImages] = useState([]);\n  const [userSelection, setUserSelection] = useState([]);\n  const [isSuccessful, setIsSuccessful] = useState(false);\n  const [imageCount, setImageCount] = useState(2); // Start with 2 images\n  const [progress, setProgress] = useState(100); // Progress bar width percentage\n  const [isMemorizationPhase, setIsMemorizationPhase] = useState(true);\n  const [questionCount, setQuestionCount] = useState(0); // Track number of questions asked\n  const [successfulAttemptsScore, setSuccessfulAttemptsScore] = useState(0); // Track score of successful attempts\n  const [successCount, setSuccessCount] = useState(0); // Track successful attempts per level\n  const [gameStarted, setGameStarted] = useState(false); // Track if the game has started\n  const [pointsList, setPointsList] = useState([]); // Track points for each question\n  const intervalRef = useRef(null); // Ref to hold the interval ID\n\n  // Refs for the audio elements\n  const successAudioRef = useRef(null);\n  const failAudioRef = useRef(null);\n\n  const handleNameChange = (e) => {\n    setPlayerName(e.target.value);\n  };\n\n  const startGameWithName = () => {\n    if (playerName.trim() !== '') {\n      startTrainingHandler();\n    }\n  };\n\n  // Callback to start training\n  const startTrainingHandler = useCallback(() => {\n    const randomImages = startTraining(images, imageCount);\n    setSelectedImages(randomImages);\n    setUserSelection([]);\n    setCurrentStep(1);\n    setProgress(100); // Start with full progress bar\n    setIsMemorizationPhase(true); // Start with memorization phase\n    setGameStarted(true); // Set the game as started\n  }, [imageCount]);\n\n  // Callback to generate extra images\n  const generateExtraImagesHandler = useCallback(() => {\n    const extraImages = generateExtraImages(selectedImages, images, imageCount);\n    setExtraImages(extraImages);\n  }, [selectedImages, imageCount]);\n\n  // Callback to handle the next step\n  const handleNextStep = useCallback(() => {\n    const isMatch =\n      selectedImages.every((image) => userSelection.includes(image)) &&\n      userSelection.length === selectedImages.length;\n\n    setIsSuccessful(isMatch);\n\n    let pointsForThisQuestion = 0;\n    if (isMatch) {\n      pointsForThisQuestion = imageCount; // Points equal to the number of images\n      setSuccessCount((prevCount) => prevCount + 1);\n      setSuccessfulAttemptsScore((prevScore) => prevScore + imageCount); // Add imageCount to successful score on success\n\n      if (successCount + 1 >= 2 && imageCount < 6) { // Move to next level after 2 successes, max out at 6 cards\n        setImageCount(imageCount + 1); // Increase difficulty\n        setSuccessCount(0); // Reset success count for the new level\n      }\n    } else {\n      setSuccessCount(0); // Reset success count on failure\n    }\n\n    // Update points list with scaled score\n    const scaledPoints = Math.round((pointsForThisQuestion / MAX_SCORE) * 100);\n    setPointsList((prevList) => [...prevList, scaledPoints]);\n\n    setQuestionCount((prevCount) => {\n      const newCount = prevCount + 1;\n      if (newCount >= TOTAL_QUESTIONS) {\n        setCurrentStep(3); // Move to the results page\n        setTimeout(() => {\n          setCurrentStep(4); // Transition to final score page after 2 seconds\n        }, 2000);\n      } else if (newCount < TOTAL_QUESTIONS) {\n        setCurrentStep(3);\n        setTimeout(() => {\n          setCurrentStep(0); // Restart the cycle\n        }, 2000);\n      }\n      return newCount;\n    });\n  }, [selectedImages, userSelection, imageCount, successCount]);\n\n\n  // Memorization Phase: Smooth progress bar with `setInterval`\n  useEffect(() => {\n    if (currentStep === 1 && isMemorizationPhase) {\n      const duration = 3000; // 3 seconds in milliseconds\n      const decrement = 100 / (duration / 10); // Calculate decrement step\n      intervalRef.current = setInterval(() => {\n        setProgress((prevProgress) => {\n          const newProgress = prevProgress - decrement;\n          if (newProgress <= 0) {\n            clearInterval(intervalRef.current);\n            setIsMemorizationPhase(false); // Switch to response phase\n            generateExtraImagesHandler(); // Prepare challenge images\n            setProgress(100); // Reset progress for response phase\n            return 0;\n          }\n          return newProgress;\n        });\n      }, 10); // Update every 10ms\n      return () => clearInterval(intervalRef.current);\n    }\n  }, [currentStep, isMemorizationPhase, generateExtraImagesHandler]);\n\n  // Response Phase: Smooth progress bar with `setInterval`\n  useEffect(() => {\n    if (currentStep === 1 && !isMemorizationPhase) {\n      const duration = 10000; // 10 seconds in milliseconds\n      const decrement = 100 / (duration / 10); // Calculate decrement step\n      intervalRef.current = setInterval(() => {\n        setProgress((prevProgress) => {\n          const newProgress = prevProgress - decrement;\n          if (newProgress <= 0) {\n            clearInterval(intervalRef.current);\n            handleNextStep(); // Automatically evaluate when response time ends\n            return 0;\n          }\n          return newProgress;\n        });\n      }, 10); // Update every 10ms\n      return () => clearInterval(intervalRef.current);\n    }\n  }, [currentStep, isMemorizationPhase, handleNextStep]);\n\n  useEffect(() => {\n    if (currentStep === 3) {\n      if (isSuccessful && successAudioRef.current) {\n        successAudioRef.current.currentTime = 0;\n        successAudioRef.current.play().catch((error) =>\n          console.error(\"Error playing success sound:\", error)\n        );\n      } else if (!isSuccessful && failAudioRef.current) {\n        failAudioRef.current.currentTime = 0;\n        failAudioRef.current.play().catch((error) =>\n          console.error(\"Error playing fail sound:\", error)\n        );\n      }\n    }\n  }, [currentStep, isSuccessful]);\n\n  const handleImageClickHandler = (image) => {\n    const newSelection = handleImageClick(image, userSelection);\n    setUserSelection(newSelection);\n  };\n\n  const handleCheckClick = () => {\n    handleNextStep(); // Evaluate immediately when \"Check\" is clicked\n  };\n\n  const handleRestart = () => {\n    setGameStarted(false);\n    setCurrentStep(0);\n    setImageCount(2); // Restart at 2 images\n    setQuestionCount(0);\n    setSuccessfulAttemptsScore(0); // Reset successful attempts score\n    setSuccessCount(0); // Reset success count\n    setPointsList([]); // Reset points list\n  };\n\n  useEffect(() => {\n    if (currentStep === 0 && gameStarted) {\n      // Automatically restart from the same level after failure or continue after success\n      startTrainingHandler(); // Restart or continue the game automatically\n    }\n  }, [currentStep, isSuccessful, startTrainingHandler, gameStarted]);\n\n  const calculateFinalScore = () => {\n    return Math.round((successfulAttemptsScore / MAX_SCORE) * 100);\n  };\n\n  const getProgressBarStyle = () => ({\n    height: \"10px\",\n    width: \"80%\", // Responsive width\n    maxWidth: \"300px\", // Maximum width to prevent overscaling\n    backgroundColor: \"#ddd\",\n    margin: \"20px auto\",\n    position: \"relative\",\n    overflow: \"hidden\",\n    borderRadius: \"5px\",\n    boxShadow: \"0 2px 5px rgba(0, 0, 0, 0.1)\",\n  });\n\n  const getProgressStyle = () => ({\n    height: \"100%\",\n    width: `${progress}%`,\n    backgroundColor: isMemorizationPhase ? \"#4caf50\" : \"#f44336\", // Green for memorization, red for response\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    transition: `width 0.01s linear`, // Smooth transition\n    borderRadius: \"5px\",\n  });\n\n  const containerStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    minHeight: \"100vh\",\n    backgroundColor: \"#f0f0f0\",\n    fontFamily: \"'Roboto', sans-serif\",\n    padding: \"20px\",\n    boxSizing: \"border-box\",\n  };\n\n\n  const playerInfoStyle = {\n    position: \"absolute\",\n    top: \"10px\",\n    left: \"10px\",\n    fontSize: \"20px\",\n    fontWeight: \"bold\",\n  };\n\n  const questionCountStyle = {\n    position: \"absolute\",\n    top: \"10px\",\n    right: \"10px\",\n    fontSize: \"20px\",\n    fontWeight: \"bold\",\n  };\n\n  const buttonStyle = {\n    fontSize: \"24px\",\n    padding: \"10px 20px\",\n    marginTop: \"20px\",\n    backgroundColor: \"#6200ea\",\n    color: \"#fff\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    cursor: \"pointer\",\n    boxShadow: \"0 4px 6px rgba(0, 0, 0, 0.1)\",\n    transition: \"background-color 0.3s ease\",\n    width: \"80%\", // Responsive width\n    maxWidth: \"300px\", // Maximum width to prevent overscaling\n  };\n\n  const inputStyle = {\n    fontSize: \"20px\",\n    padding: \"10px\",\n    borderRadius: \"5px\",\n    border: \"1px solid #ccc\",\n    marginBottom: \"20px\",\n    width: \"80%\", // Responsive width\n    maxWidth: \"300px\", // Maximum width to prevent overscaling\n    boxShadow: \"0 2px 5px rgba(0, 0, 0, 0.1)\",\n  };\n\n  const pointsListStyle = {\n    textAlign: \"left\",\n    marginTop: \"20px\",\n    fontSize: \"18px\",\n    fontFamily: \"'Roboto', sans-serif\",\n  };\n\n  const getPointsDisplay = (points) => {\n    if (points > 0) {\n      return <span style={{ color: 'green' }}>+{points}M</span>;\n    }\n    return <span style={{ color: 'red' }}>{points}</span>;\n  };\n\n  return (\n    <div style={containerStyle}>\n      {playerName && <div style={playerInfoStyle}>Player: {playerName}</div>}\n\n      <audio ref={failAudioRef} src={require('../assets/result/result_fail.mp3')}></audio>\n      <audio ref={successAudioRef} src={require('../assets/result/result_success.mp4')}></audio>\n\n      {gameStarted && currentStep !== 4 && (\n        <div style={questionCountStyle}>\n          {questionCount}/{TOTAL_QUESTIONS}\n        </div>\n      )}\n\n      {!gameStarted && (\n        <div>\n          <h2>Game Instructions</h2>\n          <p>\n            <strong>Image Display:</strong> You will be shown some images for <strong>3 seconds</strong>.\n          </p>\n          <p>\n            <strong>Image Selection:</strong> Afterward, you will have <strong>10 seconds</strong> to identify the images you just saw.\n          </p>\n          <p>\n            <strong>Scoring:</strong>\n            <ul style={{ listStylePosition: \"inside\", paddingLeft: \"0\" }}>\n              <li><strong>Correct Answers:</strong> Progress to higher levels with more challenging questions.</li>\n              <li><strong>Incorrect Answers:</strong> Stay at the current level until you answer correctly.</li>\n              <li><strong>Maximum Score:</strong> The highest achievable score is <strong>100</strong>.</li>\n              <li><strong>Difficulty:</strong> More complicated questions carry more points.</li>\n            </ul>\n          </p>\n          <center>\n          <input\n            type=\"text\"\n            placeholder=\"Enter your name\"\n            value={playerName}\n            onChange={handleNameChange}\n            style={inputStyle}\n          />\n          <br />\n\n            <button onClick={startGameWithName} style={buttonStyle}>\n              Start\n            </button>\n          </center>\n        </div>\n      )}\n\n      {gameStarted && (\n        <div>\n          {currentStep === 1 && isMemorizationPhase && (\n            <>\n              {selectedImages.map((image, index) => (\n                <img key={index} src={image} alt=\"Memory\" style={imageStyle} />\n              ))}\n              <div style={getProgressBarStyle()}>\n                <div style={getProgressStyle()} />\n              </div>\n            </>\n          )}\n          {currentStep === 1 && !isMemorizationPhase && (\n            <>\n              {extraImages.map((image, index) => (\n                <img\n                  key={index}\n                  src={image}\n                  alt=\"Memory\"\n                  style={\n                    userSelection.includes(image) ? selectedStyle : imageStyle\n                  }\n                  onClick={() => handleImageClickHandler(image)}\n                />\n              ))}\n              <div style={getProgressBarStyle()}>\n                <div style={getProgressStyle()} />\n              </div>\n              <center>\n              <button onClick={handleCheckClick} style={buttonStyle}>\n                Check\n              </button>\n              </center>\n            </>\n          )}\n          {currentStep === 3 && (\n            <>\n              <div>\n                {extraImages.map((image, index) => {\n                  let style = imageStyle;\n                  if (\n                    selectedImages.includes(image) &&\n                    userSelection.includes(image)\n                  ) {\n                    style = correctStyle;\n                  } else if (selectedImages.includes(image)) {\n                    style = correctStyle;\n                  } else if (\n                    userSelection.includes(image) &&\n                    !selectedImages.includes(image)\n                  ) {\n                    style = incorrectStyle;\n                  }\n                  return (\n                    <img\n                      key={index}\n                      src={image}\n                      alt=\"Memory\"\n                      style={style}\n                    />\n                  );\n                })}\n              </div>\n              <center>\n              <img\n                src={isSuccessful ? require('../assets/result/success.gif') : require('../assets/result/try_again.gif')}\n                alt={isSuccessful ? \"Success\" : \"Try Again\"}\n                style={{ width: \"300px\", height: \"200px\" }}\n              />\n              </center>\n            </>\n          )}\n          {currentStep === 4 && (\n            <center>\n            <div>\n              <h2>Your total score is {calculateFinalScore()}</h2>\n              <div style={pointsListStyle}>\n                {pointsList.map((points, index) => (\n                  <p key={index}>Question {index + 1}: {getPointsDisplay(points)}</p>\n                ))}\n              </div>\n              <button onClick={handleRestart} style={buttonStyle}>\n                Start Again\n              </button>\n            </div>\n            </center>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MemoryTrainer;\n","import React from 'react';\nimport MemoryTrainer from './app/MemoryTrainer';\n\nfunction App() {\n  return (\n    <div>\n      <MemoryTrainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}